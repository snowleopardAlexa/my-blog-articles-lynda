{"version":3,"sources":["pages/Home.js","pages/About.js","pages/article-content.js","Components/ArticlesList.js","pages/ArticlesListPage.js","Components/CommentsList.js","Components/UpvotesSection.js","Components/AddCommentForm.js","pages/NotFoundPage.js","pages/Article.js","Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["Home","About","articles","name","title","content","ArticlesList","map","article","key","className","to","substring","ArticlesListPage","articleContent","CommentsList","comments","comment","username","text","UpvotesSection","articleName","upvotes","setArticleInfo","upvoteArticle","a","fetch","method","result","json","body","id","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","style","marginTop","backgroundColor","fontSize","color","NotFoundPage","Article","match","params","find","articleInfo","useEffect","console","log","fetchData","otherArticles","filter","paragraph","Navbar","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2d966e65.chunk.js","sourcesContent":["import React from 'react';\n\nconst Home = () => (\n    <>\n    <h1>hello blog</h1>\n    <p>This is my blog</p>\n    </>\n)\n\nexport default Home;\n\n","import React from 'react';\n\nconst About = () => (\n    <>\n    <h1>hello About</h1>\n    <p>This is my blog</p>\n    </>\n)\n\nexport default About;","const articles = [\n    {\n     name: 'learn-react',\n     title: 'The Fastest Way to learn React',\n     content: [\n        `Welcome! Today we're going to be talking about how to learn React. The\n        key is to read the documentation and make some notes, but before you do it,\n        make sure you are a quite familiar with Javascript. You don't need to be\n        excellent at it, but you need to have a good understanding of this scripting language.\n        Secondly, I want you to focus on the terms which you don't understand. If you\n        encounter a word or the term which is weird to you, search the dictionary, make sure\n        you are searching for the tech terminology, take notes and memorize the term if you can.`\n      ]\n    },\n    {\n      name: 'learn-java',\n      title: 'How to take care of the Mainecoon cat',\n      content: [\n        `Mainecoon cats are the biggest domestic cats out there, and they need a special care.\n        They have a long coat and they require regular grooming, they eat more than normal size cats.\n        And beyond all what I said, they are friendly and they love the company of the people.`\n         ]\n    },\n    {\n      name: 'learn-python',\n      title: 'How to Tame a Dragon',\n      content: [\n         `Taming a dragon can be a challenge, because first of all: they do not exist. \n         Secondly, if they would exist, they are big and dangerous and they spit the fire,\n         so I would rather approach them with catious.`\n         ]\n       },\n];\n\nexport default articles;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ArticlesList = ({ articles }) => (\n    <>\n    { /* we display the articles using props */}\n    {articles.map((article, key) => (\n       <Link className=\"article-list-item\" key={key} to={`/article/${article.name}`}>\n          <h3>{article.title}</h3>\n          {/* we are using 50 characters from our article to display\n           the fragment of it in the browser\n          */}\n          <p>{article.content[0].substring(0, 150)}...</p>\n       </Link>\n    ))}\n    </>\n);\n\nexport default ArticlesList;\n","import React from 'react';\nimport articleContent from './article-content';\nimport ArticlesList from '../Components/ArticlesList';\n\nconst ArticlesListPage = () => (\n    <>\n    <h1>Articles</h1>\n    {/* Article content array passed as props  */}\n    <ArticlesList articles={articleContent} />\n    </>\n);\n\nexport default ArticlesListPage;","import React from 'react';\n\nconst CommentsList = ({ comments }) => (\n    <>\n    <h3>Comments:</h3>\n    {comments.map((comment, key) => (\n        <div className=\"comment\" key={key}>\n            <h4>{comment.username}</h4>\n            <p>{comment.text}</p>\n        </div>\n    ))}\n    </>\n);\n\nexport default CommentsList;","import React from 'react';\n\nconst UpvotesSection = ({ articleName, upvotes, setArticleInfo }) => {\n    const upvoteArticle = async () => {\n        const result = await fetch(`/api/articles/${articleName}/upvote`, {\n            method: 'post',\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n    }\n    return (\n        <div id=\"upvotes-section\">\n            <button onClick={() => upvoteArticle()}>Add Upvote</button>\n            <p>This post has been upvoted {upvotes} times</p>\n        </div>\n    );\n}\n\nexport default UpvotesSection;","import React, {useState} from 'react';\n\nconst AddCommentForm = ({ articleName, setArticleInfo }) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    const addComment = async () => {\n        const result = await fetch(`/api/articles/${articleName}/add-comment/`, {\n            method: 'post',\n            body: JSON.stringify({ username, text: commentText }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n        const body = await result.json();\n        setArticleInfo(body);\n        setUsername('');\n        setCommentText('');\n    }\n\n     return (\n    <div id=\"add-comment-form\">\n        <h3>Add a Comment</h3>\n        <div>\n        <label>\n           <h4>Name:</h4> \n            <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\n        </label>\n        </div>\n        <div>\n        <label>\n          <h4>Comment:</h4>\n            <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\n        </label>\n        </div>\n    <button onClick={() => addComment()} style={{marginTop: \"20px\", backgroundColor: \"green\", fontSize: \"17px\", color: \"white\"}}>Add Comment</button>\n    </div>\n    );\n   }\n\nexport default AddCommentForm;","import React from 'react';\n\nconst NotFoundPage = () => (\n <h1>404 page</h1>\n);\n\nexport default NotFoundPage;","import React, {useState, useEffect} from 'react';\nimport ArticlesList from '../Components/ArticlesList';\nimport CommentsList from '../Components/CommentsList';\nimport UpvotesSection from '../Components/UpvotesSection';\nimport AddCommentForm from '../Components/AddCommentForm';\nimport NotFoundPage from '../pages/NotFoundPage';\nimport articleContent from './article-content';\n\n// match comes from react-router and connects name\n// from App.js - URL parameters with react-router\nconst Article = ({ match }) => {\n    const name = match.params.name;\n    // we load articles \n    const article = articleContent.find(article => article.name === name);\n\n    // useState hook\n    const [articleInfo, setArticleInfo] = useState({ upvotes: 0, comments: [] });\n\n    // useEffect hook\n    // the useEffect runs not only when the component first mounts, but also\n    // whenever the component updates. Since we are updating the component from\n    // inside the useEffect hook, continously supplying a different number of\n    // upvotes, our component gets caught in an infinite loop. \n    // to prevent this, we need to pass an array called NAME, so whenever we change\n    // the article, the name of the article is called\n    useEffect(() => {\n       const fetchData = async () => {\n          const result = await fetch(`/api/articles/${name}`)\n          const body = await result.json();\n          console.log(body);\n          setArticleInfo(body);\n        }\n       fetchData()\n;    }, [name]);\n\n    // if article does not exist, we return NotFoundPage component\n    if (!article) return <NotFoundPage />\n\n    // new array other articles, we will filter article content here\n    // we want to get articles whose name is NOT equal to articles we called above\n    const otherArticles = articleContent.filter(article => article.name !== name);\n\n    return (\n    <>\n    <h1>{article.title}</h1>\n    <UpvotesSection \n      articleName={name} \n      upvotes={articleInfo.upvotes} \n      setArticleInfo={setArticleInfo} \n    />\n    {article.content.map((paragraph, key) => (\n        <p key={key}>{paragraph}</p>\n     ))}\n     <CommentsList comments={articleInfo.comments} />\n     <AddCommentForm articleName={name} setArticleInfo={setArticleInfo} />\n     <h3>Other Articles:</h3>\n     <ArticlesList articles={otherArticles} />\n    </>\n  );\n}\n\nexport default Article;","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './App.css';\n\nconst Navbar = () => \n     (\n   <nav>\n       <ul>\n           <li>\n             <Link to=\"/\">Home</Link>\n           </li>\n           <li>\n             <Link to=\"/about\">About</Link>\n           </li>\n           <li>\n             <Link to=\"/articles-list\">Articles</Link>\n           </li>\n       </ul>\n   </nav>    \n  );\n\nexport default Navbar;","import React from 'react';\nimport { BrowserRouter as Router, \n  Route, \n  Switch, } from 'react-router-dom';\nimport './App.css';\nimport Home from './pages/Home';\nimport About from './pages/About';\nimport ArticlesListPage from './pages/ArticlesListPage';\nimport Article from './pages/Article';\nimport Navbar from './Navbar';\nimport NotFoundPage from './pages/NotFoundPage';\n\nfunction App() {\n  return (\n    <Router>\n     <div className=\"App\">\n       <Navbar />\n      <div id=\"page-body\">\n    {/* SWITCH - makes sure that only one route is rendered at the time\n      It will render the first route that matches the URL, and not any other.\n      It means we need to put NotFoundPage at the end because otherwise it will\n      be the only thing that shows up since it always matches with the URL.\n    */}\n     <Switch>\n     <Route path=\"/\" component={Home} exact />\n      <Route path=\"/about\" component={About} exact />\n      <Route path=\"/articles-list\" component={ArticlesListPage} exact />\n      <Route path=\"/article/:name\" component={Article} exact />\n      <Route component={NotFoundPage} />\n     </Switch>\n      </div> \n     </div>\n    </Router>\n  );\n}\n\nexport default App;\n\n// CONNECTING FRONTEND to BACKEND \n// React - frontend\n// NodeJs and Express - server backend, supporitng functionality like\n// upvoting, adding comments \n// MongoDB - store data permanently \n// So far we tested frontend and backend separetly -->\n// Until now we used Postaman to test backend\n// In order to bring out frontend and backend together --> \n// we need to make Frontend to make api requests instead of Postam -->\n// for example: when the user visits the specific article, our frontend needs \n// to automatically make request to load the upvote and comments for that article\n// and then it needs to display that information in correct places in the page\n// we also want to make our frontend to enable users to upvote and comment the articles\n// we will use BUILT-IN API FETCH, fetch does not work in Internet Explorer so we need to -->\n// npm install --save whatwg-fetch ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// we make BUILT-IN fetch request work in the Internet Explorer\nimport 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}